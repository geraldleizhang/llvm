//===- Hello.cpp - Example code from "Writing an LLVM Pass" ---------------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file implements two versions of the LLVM "Hello World" pass described
// in docs/WritingAnLLVMPass.html
//
//===----------------------------------------------------------------------===//

#include "llvm/ADT/Statistic.h"
#include "llvm/IR/Function.h"
#include "llvm/IR/Dominators.h"
#include "llvm/IR/Instructions.h"
#include "llvm/Analysis/LoopInfo.h"
#include "llvm/Pass.h"
#include "llvm/Support/raw_ostream.h"
#include <iostream>
using namespace llvm;
using namespace std;

#define DEBUG_TYPE "hello"

STATISTIC(HelloCounter, "Counts number of functions greeted");

namespace {
  // Hello - The first implementation, without getAnalysisUsage.
  struct Hello : public FunctionPass {
    static char ID; // Pass identification, replacement for typeid
    Hello() : FunctionPass(ID) {}

    bool runOnFunction(Function &F) override {
      ++HelloCounter;
      errs() << "Hello: ";
      errs().write_escaped(F.getName()) << '\n';
      return false;
    }
  };
}

char Hello::ID = 0;
static RegisterPass<Hello> X("hello", "Hello World Pass");

namespace {
  // Hello2 - The second implementation with getAnalysisUsage implemented.
  struct basicblocks : public FunctionPass {
    static char ID; // Pass identification, replacement for typeid
    basicblocks() : FunctionPass(ID) {}

    int max = 0;
    int min = 100;
    int total = 0;
    int num = 0;


    bool runOnFunction(Function &F) override {
      ++HelloCounter;
      int temp = 0;
      int edges = 0;
      for (Function::iterator it = (&F)->begin(); it!=(&F)->end(); ++it){
        temp ++;
        //cout<<(*it).size()<<endl;
        TerminatorInst *T = it->getTerminator();
        int succ = T->getNumSuccessors();
        //errs() << succ <<'\n';
        edges += succ;
      }
      errs() << edges<<'\n';
      if (temp > max)
        max = temp;
      if (temp < min)
        min = temp;
      total += temp;
      num ++;

      DominatorTree *DT = &getAnalysis<DominatorTreeWrapperPass>().getDomTree();
      //DT->runOnFunction(&F);
      //errs() << *DT << '\n';
      Function::iterator it = F.begin();
      BasicBlock *B0 = &*it++;
      BasicBlock *B1 = &*it++;
      //errs() << DT->dominates(B1, B0)<<'\n';
      //LoopInfo &LI = getAnalysis<LoopInfoWrapperPass>().getLoopInfo();



      //printf("%d,%d\n",min, max );
      //printf("%d\n", num);
      //errs() << "Hello: ";
      //errs().write_escaped(F.getName()) << '\n';
      //print();
      return false;
    }

    virtual void print(){
      //cout<<min<<" "<<max<<" "<<total<<" "<<num<<endl;
      printf("%d,%d,%d,%f\n", min, max, total, float(total)/float(num));
    }

    // We don't modify the program, so we preserve all analyses.
    void getAnalysisUsage(AnalysisUsage &AU) const override {
      AU.setPreservesAll();
      AU.addRequired<DominatorTreeWrapperPass>();
    }
  };
}

char basicblocks::ID = 0;
static RegisterPass<basicblocks>
Y("basicblocks", "Hello World Pass (with getAnalysisUsage implemented)");
//INITIALIZE_PASS_DEPENDENCY(DominatorTreeWrapperPass)
